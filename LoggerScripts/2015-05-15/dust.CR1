'CR1000
'3 dust sensors - Met One model 212 profiler - RS-232 9600 8N1
'record battery voltage at 1/minute

'--------------
' Sensor cables
'--------------
'Sensor 1 - Com1:
'C1 - TX (brown)
'C2 - Rx (white)
'G - ground (yellow)

'Sensor 2 - Com2:
'C3 - TX (brown)
'C4 - Rx (white)
'G - ground (yellow)

'Sensor 3 - Com3:
'C5 - TX (brown)
'C6 - Rx (white)
'G - ground (yellow)

'CONTROL PORTS
'C7     Primary datalogger (C6; Simulated PPS)
'C8     Primary datalogger (C7, RS-232 Tx)
'G      Secondary datalogger serial communications referenece (G)

'DATALOGGER PROGRAM SETUP
'Force the logger to run in pipeline mode
PipeLineMode

'Setup the program constants
Const SCAN_INTERVAL = 1   'set the scan interval here in sec


'The serial buffer stores the serial data as it floats in from the sensor                          '????????????????????????/
'Then the program samples the latest, but the buffer is necessary to float the data
'Minimum serial buffer size is 37 bytes/record * 
'(Ceiling (anemometer rate * SCAN_INTERVAL / 1000)) + 50 bytes/record extra + 1 bytes.
Const SERIAL_BUFF_SIZE = 100


'VARIABLES
'Battery
Public Batt_Volt

'profilers (time, 8 bins of particle size, alarm, flow, temp, rel. humid.)
'Set an array of 13 to store the serial string that comes in from the sensor
'Alias some extra names for calling in the data table
Public dust_1(13)
Alias dust_1(1) = time_1
Alias dust_1(2) = bin1_1
Alias dust_1(3) = bin2_1
Alias dust_1(4) = bin3_1
Alias dust_1(5) = bin4_1
Alias dust_1(6) = bin5_1
Alias dust_1(7) = bin6_1
Alias dust_1(8) = bin7_1
Alias dust_1(9) = bin8_1
Alias dust_1(10) = diag_1
Alias dust_1(11) = flow_1
Alias dust_1(12) = temp_1
Alias dust_1(13) = rh_1

Public dust_2(13)
Alias dust_2(1) = time_2
Alias dust_2(2) = bin1_2
Alias dust_2(3) = bin2_2
Alias dust_2(4) = bin3_2
Alias dust_2(5) = bin4_2
Alias dust_2(6) = bin5_2
Alias dust_2(7) = bin6_2
Alias dust_2(8) = bin7_2
Alias dust_2(9) = bin8_2
Alias dust_2(10) = diag_2
Alias dust_2(11) = flow_2
Alias dust_2(12) = temp_2
Alias dust_2(13) = rh_2

Public dust_3(13)
Alias dust_3(1) = time_3
Alias dust_3(2) = bin1_3
Alias dust_3(3) = bin2_3
Alias dust_3(4) = bin3_3
Alias dust_3(5) = bin4_3
Alias dust_3(6) = bin5_3
Alias dust_3(7) = bin6_3
Alias dust_3(8) = bin7_3
Alias dust_3(9) = bin8_3
Alias dust_3(10) = diag_3
Alias dust_3(11) = flow_3
Alias dust_3(12) = temp_3
Alias dust_3(13) = rh_3

'Set a variable to hold the bytes coming in from the sensors
Public in_bytes_str_1 As String * SERIAL_BUFF_SIZE
Public in_bytes_str_2 As String * SERIAL_BUFF_SIZE
Public in_bytes_str_3 As String * SERIAL_BUFF_SIZE

'Set diagnostic out byte variables
Public num_bytes_out_1 As Long
Public num_bytes_out_2 As Long
Public num_bytes_out_3 As Long


'UNITS
Units Batt_Volt=Volts
Units time_1 = sec
Units bin1_1 = counts
Units bin2_1 = counts
Units bin3_1 = counts
Units bin4_1 = counts
Units bin5_1 = counts
Units bin6_1 = counts
Units bin7_1 = counts
Units bin8_1 = counts
Units flow_1 = LPM
Units temp_1 = oC
Units rh_1 = perc

Units time_2 = sec
Units bin1_2 = counts
Units bin2_2 = counts
Units bin3_2 = counts
Units bin4_2 = counts
Units bin5_2 = counts
Units bin6_2 = counts
Units bin7_2 = counts
Units bin8_2 = counts
Units flow_2 = LPM
Units temp_2 = oC
Units rh_2 = perc

Units time_3 = sec
Units bin1_3 = counts
Units bin2_3 = counts
Units bin3_3 = counts
Units bin4_3 = counts
Units bin5_3 = counts
Units bin6_3 = counts
Units bin7_3 = counts
Units bin8_3 = counts
Units flow_3 = LPM
Units temp_3 = oC
Units rh_3 = perc

'Variables for GPS
Dim nmea_sentence(4) As String * 82
Dim gps_data(30)

'DATA TABLES

'Dust Sensor
DataTable (dust,1,-1)
	'Log at specified data interval
	DataInterval (0,SCAN_INTERVAL,sec,0)

	'sample the sensors
	Sample (1,bin1_1,UINT2)                                                                   '??????????????????????
  Sample (1,bin2_1,UINT2)
	Sample (1,bin3_1,UINT2)
	Sample (1,bin4_1,UINT2)
	Sample (1,bin5_1,UINT2)
	Sample (1,bin6_1,UINT2)
	Sample (1,bin7_1,UINT2)
	Sample (1,bin8_1,UINT2)
	Sample (1,diag_1,UINT2)
	Sample (1,flow_1,FP2)
	Sample (1,temp_1,FP2)
	Sample (1,rh_1,FP2)
	
	Sample (1,bin1_2,UINT2)                                                                   '??????????????????????
  Sample (1,bin2_2,UINT2)
	Sample (1,bin3_2,UINT2)
	Sample (1,bin4_2,UINT2)
	Sample (1,bin5_2,UINT2)
	Sample (1,bin6_2,UINT2)
	Sample (1,bin7_2,UINT2)
	Sample (1,bin8_2,UINT2)
	Sample (1,diag_2,UINT2)
	Sample (1,flow_2,FP2)
	Sample (1,temp_2,FP2)
	Sample (1,rh_2,FP2)
	
	Sample (1,bin1_3,UINT2)                                                                   '??????????????????????
  Sample (1,bin2_3,UINT2)
	Sample (1,bin3_3,UINT2)
	Sample (1,bin4_3,UINT2)
	Sample (1,bin5_3,UINT2)
	Sample (1,bin6_3,UINT2)
	Sample (1,bin7_3,UINT2)
	Sample (1,bin8_3,UINT2)
	Sample (1,diag_3,UINT2)
	Sample (1,flow_3,FP2)
	Sample (1,temp_3,FP2)
	Sample (1,rh_3,FP2)

EndTable


'Battery data
DataTable (loggerC_battery,1,-1)
	'Log every minute
	DataInterval(0,1,Min,10)
	Minimum(1,Batt_Volt,FP2,False,False)
EndTable



'MAIN PROGRAM
BeginProg
	
	'Open serial port(s) for comms (COM1 - COM3)
	SerialOpen (Com1,9600,0,0,SERIAL_BUFF_SIZE)
	SerialOpen (Com2,9600,0,0,SERIAL_BUFF_SIZE)
	SerialOpen (Com3,9600,0,0,SERIAL_BUFF_SIZE)
	
  'Command to start the dust sensor
  SerialOut(Com1,"S","",0,1)
  SerialOut(Com2,"S","",0,1)
  SerialOut(Com3,"S","",0,1)
	
  'Set scanning interval, leave buffer overload to 20
	Scan (SCAN_INTERVAL,sec,20,0)                                                          '??????????????????????????? buffer option
	  GPS (gps_data(1),Com4,0,0,nmea_sentence(1))
	  
		'Sensor serial Comms, DUST 1 (COM1)
		SerialInRecord (Com1,in_bytes_str_1,10,0,13,num_bytes_out_1,01)
	
		'Split the string and convert it into floats
		SplitStr (dust_1,in_bytes_str_1,"",13,0)
	
		'Next, check the error code
		If diag_1 > 0 Then
		  bin1_1=-99
		  bin2_1=-99
		  bin3_1=-99
		  bin4_1=-99
		  bin5_1=-99
		  bin6_1=-99
		  bin7_1=-99
		  bin8_1=-99
		  flow_1=-99
		  temp_1=-99
		  rh_1=-99
		EndIf
		
		'Sensor serial Comms, DUST 2 (COM2)
		SerialInRecord (Com2,in_bytes_str_2,10,0,13,num_bytes_out_2,01)
	
		'Split the string and convert it into floats
		SplitStr (dust_2,in_bytes_str_2,"",13,0)
	
		'Next, check the error code
		If diag_2 > 0 Then
		  bin1_2=-99
		  bin2_2=-99
		  bin3_2=-99
		  bin4_2=-99
		  bin5_2=-99
		  bin6_2=-99
		  bin7_2=-99
		  bin8_2=-99
		  flow_2=-99
		  temp_2=-99
		  rh_2=-99
		EndIf


		'Sensor serial Comms, DUST 3 (COM3)
		SerialInRecord (Com3,in_bytes_str_3,10,0,13,num_bytes_out_3,01)
	
		'Split the string and convert it into floats
		SplitStr (dust_3,in_bytes_str_3,"",13,0)
	
		'Next, check the error code
		If diag_3 > 0 Then
		  bin1_3=-99
		  bin2_3=-99
		  bin3_3=-99
		  bin4_3=-99
		  bin5_3=-99
		  bin6_3=-99
		  bin7_3=-99
		  bin8_3=-99
		  flow_3=-99
		  temp_3=-99
		  rh_3=-99
		EndIf
	
		'Call Output Tables
		CallTable (dust)  

	NextScan

	
	'Battery slow sequence scan
	SlowSequence
		Scan (60,sec,10,0)
			'Default Datalogger Battery Voltage measurement Batt_Volt:
			Battery(Batt_Volt)
			
			'Call the sync table to record the timestamps
			CallTable (loggerC_battery)
		NextScan
  	
EndProg

