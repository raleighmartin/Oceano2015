'CR3000 Series Datalogger

' Datalogger 2 - 3 CSAT3

' This datalogger program measures up to NUM_SYSTEM sets of turbulence sensors at 20 Hz.
' The time series can be saved to a card. 
' The datalogger will also compute online statistics from the measured data.

'The following sensors are measured:
'CSAT3    three dimensional sonic anemometers set to SDM address 1, 2, 3, and 4.

'*** Unit Definitions ***

'Units    Units
'C        Celsius
'degrees  degrees (angle)
'g        grams
'm        meters
'mg       milligrams
'mmol     millimoles
'mol      moles
's	      seconds
'umol     micromols
'V        volts


'*** Wiring ***

'SDM INPUT
'SDM-C1	CSAT3 #1 SDM Data (green)
'       CSAT3 #2 SDM Data (green)
'       CSAT3 #3 SDM Data (green)
'       CSAT3 #4 SDM Data (green)
'SDM-C2	CSAT3 #1 SDM Clock (white)
'       CSAT3 #2 SDM Clock (white)
'       CSAT3 #3 SDM Clock (white)
'       CSAT3 #4 SDM Clock (white)
'SDM-C3	CSAT3 #1 SDM Enable (brown)
'       CSAT3 #2 SDM Enable (brown)
'       CSAT3 #3 SDM Enable (brown)
'       CSAT3 #4 SDM Enable (brown)
'G      CSAT3 #1 SDM reference (black)
'       CSAT3 #1 SDM shield (clear)
'       CSAT3 #2 SDM reference (black)
'       CSAT3 #2 SDM shield (clear)
'       CSAT3 #3 SDM reference (black)
'       CSAT3 #3 SDM shield (clear)
'       CSAT3 #4 SDM reference (black)
'       CSAT3 #4 SDM shield (clear)

'CONTROL PORTS
'C6     Secondary datalogger (C7; Com4 Tx - PPS)
'C7     Secondary datalogger (C8; Com4 Rx)
'C8     not avaliable for use
'G      Secondary datalogger serial communications referenece (G)


'POWER IN
'12V    datalogger (red)
'G      datalogger (black)


'EXTERNAL POWER SUPPLY
'POS    CSAT3 #1 power (red)
'       CSAT3 #2 power (red)
'       CSAT3 #3 power (red)
'       CSAT3 #4 power (red)
'       datalogger (red)
'NEG    CSAT3 #1 power reference (black)
'       CSAT3 #1 power shield (clear)
'       CSAT3 #2 power reference (black)
'       CSAT3 #2 power shield (clear) 
'       CSAT3 #3 power reference (black)
'       CSAT3 #3 power shield (clear)
'       CSAT3 #4 power reference (black)
'       CSAT3 #4 power shield (clear)
'       datalogger (black)

PipeLineMode

'*** Constants ***

'Measurement Rate             '10 Hz     20 Hz     50 Hz
Const SCAN_INTERVAL = 20      '100 mSec  50 mSec   20 mSec

'Output period
Const OUTPUT_INTERVAL = 30 'Online statistics output interval in minutes.
Const NUM_DAY_CPU = 1      'Number of days of data to store on the CPU.
Const NUM_SYSTEMS = 3      'Number of eddy covariance systems connected to the datalogger.
Const NUM_DAY_CRD = 30    'Number of days of data to store on the CRD (1 GB - 7.5 days; 2 GB - 15 days; 16 GB - 120.7 days).

Const OFFSET = 16                          'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const DELAY_CSAT = 2                       'Fixed inherent lag of the CSAT3 data (two scans).

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and LI-7500.
Const SCAN_BUFFER_SIZE = 300*INT (1000/SCAN_INTERVAL)'Compute a 300 second scan buffer.
Const CSAT_OPT = 60  'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT     'Number of records back to align CSAT3 data.

'Compute CPU and CRD storage size for the DIAG DataTable.
Const DIAG_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL'Size of diag DataTable on CPU [days].
Const DIAG_SIZE_CRD = Ceiling (NUM_DAY_CRD*1440)/OUTPUT_INTERVAL  'Size of flux data table on CRD [days].

Const SDM_PER = 30                         'Default SDM clock speed.


'*** Variables ***

'Online lagged CSAT3 and LI-7500 data.
Public aligned_data(NUM_SYSTEMS,6)
Alias aligned_data(1,1) = panel_temp
Alias aligned_data(1,2) = Ux_1
Alias aligned_data(1,3) = Uy_1
Alias aligned_data(1,4) = Uz_1
Alias aligned_data(1,5) = Ts_1
Alias aligned_data(1,6) = diag_csat_1
Alias aligned_data(2,1) = dumby_2
Alias aligned_data(2,2) = Ux_2
Alias aligned_data(2,3) = Uy_2
Alias aligned_data(2,4) = Uz_2
Alias aligned_data(2,5) = Ts_2
Alias aligned_data(2,6) = diag_csat_2
Alias aligned_data(3,1) = dumby_3
Alias aligned_data(3,2) = Ux_3
Alias aligned_data(3,3) = Uy_3
Alias aligned_data(3,4) = Uz_3
Alias aligned_data(3,5) = Ts_3
Alias aligned_data(3,6) = diag_csat_3

Units panel_temp = C
Units Ux_1 = m/s
Units Uy_1 = m/s
Units Uz_1 = m/s
Units Ts_1 = C
Units diag_csat_1 = unitless
Units dumby_2 = C
Units Ux_2 = m/s
Units Uy_2 = m/s
Units Uz_2 = m/s
Units Ts_2 = C
Units diag_csat_2 = unitless
Units dumby_3 = C
Units Ux_3 = m/s
Units Uy_3 = m/s
Units Uz_3 = m/s
Units Ts_3 = C
Units diag_csat_3 = unitless

Public diag_bits(NUM_SYSTEMS,4) As Boolean	'Warning flags.
Alias diag_bits(1,1) = del_T_f_1   'Delta temperature warning flag #4.
Alias diag_bits(1,2) = sig_lck_f_1 'Poor signal lock warning flag #4.
Alias diag_bits(1,3) = amp_h_f_1   'Amplitude high warning flag #4.
Alias diag_bits(1,4) = amp_l_f_1   'Amplitude low warning flag #4.
Alias diag_bits(2,1) = del_T_f_2   'Delta temperature warning flag #5.
Alias diag_bits(2,2) = sig_lck_f_2 'Poor signal lock warning flag #5.
Alias diag_bits(2,3) = amp_h_f_2   'Amplitude high warning flag #5.
Alias diag_bits(2,4) = amp_l_f_2   'Amplitude low warning flag #5.
Alias diag_bits(3,1) = del_T_f_3   'Delta temperature warning flag #6.
Alias diag_bits(3,2) = sig_lck_f_3 'Poor signal lock warning flag #6.
Alias diag_bits(3,3) = amp_h_f_3   'Amplitude high warning flag #6.
Alias diag_bits(3,4) = amp_l_f_3   'Amplitude low warning flag #6.
Units diag_bits = samples

Public batt_volt                   'Datalogger battery voltage.
Units batt_volt = V


'Diagnostic variables.
Dim disable_flag_on(NUM_SYSTEMS,2) As Boolean'Intermediate processing disable flags.
'disable_flag_on(i,1)                        'TRUE when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'disable_flag_on(i,2)                        'TRUE when CSAT3 diagnostic warning flags are on.
'                                             Used to filter the sum of CSAT3 diagnostic warning flags.

Dim n(1)                                  'Number of samples in the online covariances.
Units n = samples


'No delay CSAT3 data.
Dim wind_raw(NUM_SYSTEMS,5)
Alias wind_raw(1,1) = Ux_raw_1
Alias wind_raw(1,2) = Uy_raw_1
Alias wind_raw(1,3) = Uz_raw_1
Alias wind_raw(1,4) = Ts_raw_1
Alias wind_raw(1,5) = diag_csat_raw_1
Alias wind_raw(2,1) = Ux_raw_2
Alias wind_raw(2,2) = Uy_raw_2
Alias wind_raw(2,3) = Uz_raw_2
Alias wind_raw(2,4) = Ts_raw_2
Alias wind_raw(2,5) = diag_csat_raw_2
Alias wind_raw(3,1) = Ux_raw_3
Alias wind_raw(3,2) = Uy_raw_3
Alias wind_raw(3,3) = Uz_raw_3
Alias wind_raw(3,4) = Ts_raw_3
Alias wind_raw(3,5) = diag_csat_raw_3
Units wind_raw = m/s
Units Ts_raw_1 = C
Units Ts_raw_2 = C
Units Ts_raw_3 = C
Units diag_csat_raw_1 = unitless
Units diag_csat_raw_2 = unitless
Units diag_csat_raw_3 = unitless

'No delay analog measurements.
Dim panel_temp_raw
Units panel_temp_raw = C

Dim i As Long                    'Generic counter variable.
Dim scan_count As Long           'Number scans executed.
Dim save_ts_flag_on As Boolean   'Used to synchronize the time series output to the even minute.
Dim dly_data_out(NUM_SYSTEMS,6) 'Variable used to temporarily store the lagged record.
Dim diag_csat_work As Long       'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work As Long       'Working variable used to break out the LI-7500 diagnostic bits.

Dim nmea_sentence(4) As String * 82
Dim gps_data(30)

Dim process_time
Dim buff_depth

'*** Final Output Data Tables ***

'Online diag data.
DataTable (diag,TRUE,DIAG_SIZE_CPU)
  DataInterval (0,OUTPUT_INTERVAL,Min,10)
  CardOut (0,DIAG_SIZE_CRD)

  Totalize (1,n,IEEE4,NOT (disable_flag_on(1,1) OR disable_flag_on(1,2)))
  FieldNames ("csat_warnings_1")
  Totalize (1,n,IEEE4,del_T_f_1 IMP (Ts_1=NAN))
  FieldNames ("del_T_f_1_Tot")
  Totalize (1,n,IEEE4,sig_lck_f_1 IMP (Ts_1=NAN))
  FieldNames ("sig_lck_f_1_Tot")
  Totalize (1,n,IEEE4,amp_h_f_1 IMP (Ts_1=NAN))
  FieldNames ("amp_h_f_1_Tot")
  Totalize (1,n,IEEE4,amp_l_f_1 IMP (Ts_1=NAN))
  FieldNames ("amp_l_f_1_Tot")

  Totalize (1,n,IEEE4,NOT (disable_flag_on(2,1) OR disable_flag_on(2,2)))
  FieldNames ("csat_warnings_2")
  Totalize (1,n,IEEE4,del_T_f_2 IMP (Ts_2=NAN))
  FieldNames ("del_T_f_2_Tot")
  Totalize (1,n,IEEE4,sig_lck_f_2 IMP (Ts_2=NAN))
  FieldNames ("sig_lck_f_2_Tot")
  Totalize (1,n,IEEE4,amp_h_f_2 IMP (Ts_2=NAN))
  FieldNames ("amp_h_f_2_Tot")
  Totalize (1,n,IEEE4,amp_l_f_2 IMP (Ts_2=NAN))
  FieldNames ("amp_l_f_2_Tot")

  Totalize (1,n,IEEE4,NOT (disable_flag_on(3,1) OR disable_flag_on(3,2)))
  FieldNames ("csat_warnings_3")
  Totalize (1,n,IEEE4,del_T_f_3 IMP (Ts_3=NAN))
  FieldNames ("del_T_f_3_Tot")
  Totalize (1,n,IEEE4,sig_lck_f_3 IMP (Ts_3=NAN))
  FieldNames ("sig_lck_f_3_Tot")
  Totalize (1,n,IEEE4,amp_h_f_3 IMP (Ts_3=NAN))
  FieldNames ("amp_h_f_3_Tot")
  Totalize (1,n,IEEE4,amp_l_f_3 IMP (Ts_3=NAN))
  FieldNames ("amp_l_f_3_Tot")

  
  Average (1,panel_temp,IEEE4,FALSE)
  Average (1,batt_volt,IEEE4,FALSE)
  Average (1,process_time,IEEE4,FALSE)
  StdDev (1,process_time,IEEE4,FALSE)
  Maximum (1,process_time,IEEE4,FALSE,FALSE)
  Average (1,buff_depth,IEEE4,FALSE)
  Maximum (1,buff_depth,IEEE4,FALSE,FALSE)
  Sample (1,gps_data(13),IEEE4)
  FieldNames ("gps_ready")
  Sample (1,gps_data(15),IEEE4)
  FieldNames ("nmbr_gps_clck_chngs")
EndTable

'Time series data.
DataTable (ts_data,save_ts_flag_on,-1)
  DataInterval (0,SCAN_INTERVAL,mSec,10)
  CardOut (1,-1)
  'TableFile ("CRD:"&Status.SerialNumber(1,1)&".ts_data_",64,-1,0,1,Day,0,0)

  Sample (1,Ux_1,IEEE4)
  Sample (1,Uy_1,IEEE4)
  Sample (1,Uz_1,IEEE4)
  Sample (1,Ts_1,IEEE4)
  Sample (1,diag_csat_1,IEEE4)
  
  Sample (1,Ux_2,IEEE4)
  Sample (1,Uy_2,IEEE4)
  Sample (1,Uz_2,IEEE4)
  Sample (1,Ts_2,IEEE4)
  Sample (1,diag_csat_2,IEEE4)
  
  Sample (1,Ux_3,IEEE4)
  Sample (1,Uy_3,IEEE4)
  Sample (1,Uz_3,IEEE4)
  Sample (1,Ts_3,IEEE4)
  Sample (1,diag_csat_3,IEEE4)

 EndTable

'*** Working Data Tables ***

'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)
  TableHide
  Sample (1,panel_temp_raw,IEEE4)
  Sample (1,Ux_raw_1,IEEE4)
  Sample (1,Uy_raw_1,IEEE4)
  Sample (1,Uz_raw_1,IEEE4)
  Sample (1,Ts_raw_1,IEEE4)
  Sample (1,diag_csat_raw_1,IEEE4)

  Sample (1,panel_temp_raw,IEEE4)
  FieldNames ("dumby_raw_2")
  Sample (1,Ux_raw_2,IEEE4)
  Sample (1,Uy_raw_2,IEEE4)
  Sample (1,Uz_raw_2,IEEE4)
  Sample (1,Ts_raw_2,IEEE4)
  Sample (1,diag_csat_raw_2,IEEE4)

  Sample (1,panel_temp_raw,IEEE4)
  FieldNames ("dumby_raw_3")
  Sample (1,Ux_raw_3,IEEE4)
  Sample (1,Uy_raw_3,IEEE4)
  Sample (1,Uz_raw_3,IEEE4)
  Sample (1,Ts_raw_3,IEEE4)
  Sample (1,diag_csat_raw_3,IEEE4)

EndTable

'*** Program ***

BeginProg
  'Set all CSAT3 variables to NAN.
  Move (Ux_raw_2,15,NAN,1)

  'Set the SDM clock speed.
  SDMSpeed (SDM_PER)

  Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)
 		GPS (gps_data(1),Com4,0,0,nmea_sentence(1))

    'Datalogger panel temperature.
    PanelTemp (panel_temp_raw,250)

    'Measure battery voltage.
    Battery (batt_volt)

    'Lag the CSAT3 and LI-7500 measurements.
    CallTable dly_data
    If ( scan_count >= OFFSET ) Then
      'Load in the analog data that has been lagged by OFFSET scans.
      GetRecord (dly_data_out(1,1),dly_data,OFFSET)
      Move (panel_temp,1,dly_data_out(1,1),1)	'panel_temp


      'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
      GetRecord (dly_data_out(1,1),dly_data,CSAT_REC_BCK)
      Move (Ux_1,5,dly_data_out(1,2),5) 'Ux_1, Uy_1, Uz_1, Ts_1, diag_csat_1
      Move (Ux_2,5,dly_data_out(2,2),5) 'Ux_2, Uy_2, Uz_2, Ts_2, diag_csat_2
      Move (Ux_3,5,dly_data_out(3,2),5) 'Ux_3, Uy_3, Uz_3, Ts_3, diag_csat_3

      For i = 1 To NUM_SYSTEMS
        'Define 61502 as NAN.
        If ( aligned_data(i,6) = NAN ) Then ( aligned_data(i,6) = 61502 ) 'aligned_data(i,6) = diag_csat_i

        'Break up the four CSAT3 warning flags into four separate bits.
        Move (diag_csat_work,1,aligned_data(i,6),1) 'aligned_data(i,6) = diag_csat_i
        diag_bits(i,1) = diag_csat_work AND &h8000 'diag_bits(i,1) = del_T_f_i
        diag_bits(i,2) = diag_csat_work AND &h4000 'diag_bits(i,2) = sig_lck_f_i
        diag_bits(i,3) = diag_csat_work AND &h2000 'diag_bits(i,3) = amp_h_f_i
        diag_bits(i,4) = diag_csat_work AND &h1000 'diag_bits(i,4) = amp_l_f_i

        'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
        ' high, including the special cases NAN (61502), a Lost Trigger (61440), No Data
        ' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
        disable_flag_on(i,1) = diag_csat_work AND &hf000

        'Turn on only when CSAT3 diagnostic warning flags are set.
        disable_flag_on(i,2) = disable_flag_on(i,1) AND (aligned_data(i,5) <> NAN) 'aligned_data(i,5) = Ts_i

        'Save the four most significant bits of the CSAT3 diagnostics, except for the
        ' special cases NAN (61502), a Lost Trigger (61440), No Data (61503), an SDM
        ' error (61441), or wrong CSAT3 embedded code (61442).
        If ( diag_csat_work <= &hf000 ) Then ( aligned_data(i,6) = diag_csat_work>>12 ) 'aligned_data(i,6) = diag_csat_i
      Next i

      process_time = Status.ProcessTime(1,1)
      buff_depth = Status.BuffDepth(1,1)

      'Start saving the time series data on an even minute boundary.
      If ( (NOT (save_ts_flag_on)) AND (IfTime (0,1,Min)) ) Then ( save_ts_flag_on = TRUE )

      'Save adjusted time series data.
      CallTable ts_data
      CallTable diag
    Else
      scan_count = scan_count+1
    EndIf

    'Trigger all the CSAT3s to make measurements.
    SDMTrigger

    'Get CSAT3 #1 wind and sonic temperature data.
    CSAT3 (Ux_raw_1,1,1,98,CSAT_OPT)

    'Get CSAT3 #2 wind and sonic temperature data.
    CSAT3 (Ux_raw_2,1,2,98,CSAT_OPT)

    'Get CSAT3 #3 wind and sonic temperature data.
    CSAT3 (Ux_raw_3,1,3,98,CSAT_OPT)
  NextScan
EndProg
